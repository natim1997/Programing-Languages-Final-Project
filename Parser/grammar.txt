""" BNF Grammar:

<statements> ::= newline* <statement>  (newline+ <statement>)* newline*

<statement> ::= continue | break |<parse_boolean_expression> | return

<parse_boolean_expression> ::= <parse_boolean_term> (<and_or_op> <parse_boolean_term>)*

<parse_boolean_term> ::= <parse_boolean_factor> (<equal_op> <parse_boolean_factor>)*

<parse_boolean_factor> ::= <compare_expression> | <boolean> | <not> <parse_boolean_factor>

<compare_expression> ::= <parse_expression> (<compare_op> <parse_expression>)*

<parse_expression> ::= <parse_term> (<add_sub_op> <parse_term>)*

<parse_term> ::= <parse_factor> (<mul_div_op> <parse_factor>)*

<parse_factor> ::= <add_sub_op> <parse_expression> | <call_expression>

<call_expression> ::= <atom> | <atom> "(" <parse_expression> ")"

<atom> ::= <while_expression> | <int> | (<parse_boolean_expression>) | <function_definition> | <identifier> | <def_lambda>

<function_definition> ::= "function" <identifier> "(" <identifier> ("," <identifier>)* ")"  <parse_boolean_expression> "" | "function" "(" <identifier> ("," <identifier>)* ")"  <parse_boolean_expression>

<while_expression> ::= "while" "(" <parse_boolean_expression> ")" "{" <parse_boolean_expression> "}" | "while" "(" <parse_boolean_expression> ")" { newline <statements>}

<def_lambda> ::= "lambda" <identifier> "(" <identifier> ("," <identifier>)* ")" <parse_boolean_expression>

<not> ::= "!"
<boolean> ::= "true" | "false"
<add_sub_op> ::= "+" | "-"
<mul_div_idiv_mod_op> ::= "*" | "/" | "//" | "%"
<and_or_op> ::= "&&" | "||"
<equal_op> ::= "==" | "!="
<compare_op> ::= <equal_op> | ">" | "<" | ">=" | "<="
<int> ::= <regular_numbers> | 0 | <regular_numbers> <int>
<regular_numbers> ::= [1-9]+
<keywords> ::= "while"
<identifier> ::= <letter> (<letter> | <digit>)*
"""